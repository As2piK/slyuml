package swing.propretiesView;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import swing.JPanelRounded;
import swing.SButton;
import swing.Slyum;
import utility.PersonalizedIcon;
import utility.Utility;
import abstractDiagram.IDiagramComponent.UpdateMessage;
import classDiagram.components.Attribute;
import classDiagram.components.Entity;
import classDiagram.components.InterfaceEntity;
import classDiagram.components.Method;
import classDiagram.components.PrimitiveType;
import classDiagram.components.Type;
import classDiagram.components.Variable;
import classDiagram.components.Visibility;
import classDiagram.verifyName.TypeName;
import dbDiagram.components.Field;

/**
 * Show the propreties of an UML entity with Swing components. All inner classes
 * are used for create customized JTable.
 * 
 * @author David Miserez
 * @version 1.0 - 28.07.2011
 */
public class DBEntityPropreties extends GlobalPropreties
{
	private static DBEntityPropreties instance = new DBEntityPropreties();

	private static final long serialVersionUID = 7817631106855232540L;

	/**
	 * Get the unique instance of this class.
	 * 
	 * @return the unique instance of EntityPropreties
	 */
	public static DBEntityPropreties getInstance()
	{
		return instance;
	}

	/**
	 * Set the given size for preferredSize, maximumSize and minimumSize to the
	 * given component.
	 * 
	 * @param component
	 *            the component to resize
	 * @param size
	 *            the size
	 */
	public static void setAllSize(JComponent component, Dimension size)
	{
		component.setPreferredSize(size);
		component.setMaximumSize(size);
		component.setMinimumSize(size);
	}

	JComboBox<String> comboBox = Utility.getVisibilityComboBox();

	private final JLabel imgNoAttribute, imgNoMethod, imgMethodSelected,
			imgNoParameter;

	JPanel panelParameters;

	private JScrollPane scrollPaneAttributes, scrollPaneMethods,
			scrollPaneParameters, scrollPaneFields;

	JTextField textName = new JTextField();

	protected DBEntityPropreties()
	{
		String small = ".png";
		
		if (Slyum.getSmallIcons())
			small = "_small.png";
			
		setBackground(Color.WHITE);
		
	}

	public JPanel createEntityPropreties()
	{
		final JPanel panel = new JPanel();
		Dimension size = new Dimension(200, 110);
		setAllSize(panel, size);
		panel.setOpaque(false);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));

		final JPanel panelTitle = new JPanel(new FlowLayout());
		panelTitle.setOpaque(false);
		panelTitle.add(createTitleLabel("Entity"));

		size = new Dimension(200, 20);
		setAllSize(panelTitle, new Dimension((int) size.getWidth(), 40));
		setAllSize(textName, size);
		setAllSize(checkBoxAbstract, new Dimension((int) size.getWidth(), 30));
		setAllSize(comboBox, new Dimension(80, (int) size.getHeight()));

		panelTitle.setAlignmentX(LEFT_ALIGNMENT);
		textName.setAlignmentX(LEFT_ALIGNMENT);
		checkBoxAbstract.setAlignmentX(LEFT_ALIGNMENT);
		comboBox.setAlignmentX(LEFT_ALIGNMENT);

		checkBoxAbstract.setOpaque(false);

		// Event
		textName.addKeyListener(new KeyAdapter() {

			@Override
			public void keyTyped(KeyEvent e)
			{
				if (e.getKeyChar() == '\n')
				{
					final Entity entity = (Entity) currentObject;

					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
				}
			}
		});

		checkBoxAbstract.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				((Entity) currentObject).setAbstract(checkBoxAbstract.isSelected());
				((Entity) currentObject).notifyObservers();
			}
		});

		comboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				final Visibility newVisibility = Visibility.valueOf(comboBox.getSelectedItem().toString().toUpperCase());

				if (currentObject instanceof Entity && newVisibility != Visibility.valueOf(((Entity) currentObject).getVisibility().getName().toUpperCase()))
				{
					((Entity) currentObject).setVisibility(newVisibility);
					((Entity) currentObject).notifyObservers();
				}
			}
		});

		panel.add(panelTitle);
		panel.add(textName);
		panel.add(checkBoxAbstract);
		panel.add(comboBox);

		return panel;
	}	

	public JLabel createTitleLabel(String text)
	{
		final JLabel label = new JLabel(text);
		label.setFont(label.getFont().deriveFont(20.0f));
		label.setAlignmentX(CENTER_ALIGNMENT);

		return label;
	}

	public JPanel createWhitePanel()
	{
		final JPanel panel = new JPanel();
		panel.setBackground(SystemColor.control);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setOpaque(false);
		return panel;
	}

	@Override
	public void updateComponentInformations(UpdateMessage msg)
	{

		if (currentObject == null)
			return;

		if (currentObject instanceof Entity) {
		
			final Entity entity = (Entity) currentObject;
			final AttributeTableModel modelAttributes = (AttributeTableModel) attributesTable.getModel();
			final MethodTableModel modelMethods = (MethodTableModel) methodsTable.getModel();
	
			final LinkedList<Attribute> attributes = entity.getAttributes();
			final LinkedList<Method> methods = entity.getMethods();
	
			if (msg != null && msg.equals(UpdateMessage.UNSELECT))
				if (!entity.getName().equals(textName.getText()))
					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
	
			textName.setText(entity.getName());
			checkBoxAbstract.setSelected(entity.isAbstract());
			checkBoxAbstract.setEnabled(currentObject.getClass() != InterfaceEntity.class);
			comboBox.setSelectedItem(entity.getVisibility().getName());
	
			modelAttributes.clearAll();
			modelMethods.clearAll();
	
			for (int i = 0; i < attributes.size(); i++)
				modelAttributes.addAttribute(attributes.get(i));
	
			for (int i = 0; i < methods.size(); i++)
				modelMethods.addMethod(methods.get(i));
	
			scrollPaneAttributes.setVisible(attributes.size() > 0);
			scrollPaneMethods.setVisible(methods.size() > 0);
	
			imgNoAttribute.setVisible(attributes.size() <= 0);
			imgNoMethod.setVisible(methods.size() <= 0);
	
			btnRemoveMethod.setEnabled(false);
			btnRemoveAttribute.setEnabled(false);
			btnUpAttribute.setEnabled(false);
			btnDownAttribute.setEnabled(false);
			btnUpMethod.setEnabled(false);
			btnDownMethod.setEnabled(false);
			btnRemoveParameters.setEnabled(false);
			btnRightParameters.setEnabled(false);
			btnLeftParameters.setEnabled(false);
	
			validate();
		} else if (currentObject instanceof dbDiagram.components.TableEntity) {
		
			final dbDiagram.components.TableEntity entity = (dbDiagram.components.TableEntity) currentObject;
			final FieldTableModel modelFields = (FieldTableModel) fieldsTable.getModel();
	
			final LinkedList<Field> field = entity.getFields();
	
			if (msg != null && msg.equals(UpdateMessage.UNSELECT))
				if (!entity.getName().equals(textName.getText()))
					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
	
			textName.setText(entity.getName());
			//checkBoxAbstract.setSelected(entity.isAbstract());
			//checkBoxAbstract.setEnabled(currentObject.getClass() != InterfaceEntity.class);
			//comboBox.setSelectedItem(entity.getVisibility().getName()); //TODO Selection //TODO supprimer les checkbox
	
			modelFields.clearAll();
	
			for (int i = 0; i < field.size(); i++)
				modelFields.addField(field.get(i));
	
			scrollPaneAttributes.setVisible(field.size() > 0);
	
			imgNoAttribute.setVisible(field.size() <= 0);
	
			btnRemoveField.setEnabled(false);
			btnUpField.setEnabled(false);
			btnDownField.setEnabled(false);
	
			validate();
		}
	}
}
