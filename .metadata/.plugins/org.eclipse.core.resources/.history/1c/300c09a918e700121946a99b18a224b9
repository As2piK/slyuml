package swing.propretiesView;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import swing.JPanelRounded;
import abstractDiagram.IDiagramComponent.UpdateMessage;
import dbDiagram.relationships.Binary;

/**
 * Show the propreties of an UML entity with Swing components. All inner classes
 * are used for create customized JTable.
 * 
 * @author David Miserez
 * @version 1.0 - 28.07.2011
 */
public class DBEntityPropreties extends GlobalPropreties
{
	
	private static DBEntityPropreties instance = new DBEntityPropreties();

	private static final long serialVersionUID = 7817631106855232540L;

	/**
	 * Get the unique instance of this class.
	 * 
	 * @return the unique instance of EntityPropreties
	 */
	public static DBEntityPropreties getInstance()
	{
		return instance;
	}

	/**
	 * Set the given size for preferredSize, maximumSize and minimumSize to the
	 * given component.
	 * 
	 * @param component
	 *            the component to resize
	 * @param size
	 *            the size
	 */
	public static void setAllSize(JComponent component, Dimension size)
	{
		component.setPreferredSize(size);
		component.setMaximumSize(size);
		component.setMinimumSize(size);
	}

	JTextField textName = new JTextField();

	protected DBEntityPropreties()
	{

		setBackground(Color.WHITE);

		JPanelRounded p = new JPanelRounded();
		p.setForeground(Color.GRAY);
		p.setBackground(new Color(240, 240, 240));
		p.setAlignmentY(TOP_ALIGNMENT);
		p.setBorder(BorderFactory.createEmptyBorder(9, 9, 9, 9));

		p.setMaximumSize(new Dimension(0, Integer.MAX_VALUE));

		{
			p.add(createEntityPropreties());
		}

		add(p);

		JPanel panelButton = new JPanel();
		panelButton.setOpaque(false);
		panelButton.setLayout(new BoxLayout(panelButton, BoxLayout.PAGE_AXIS));

		p = new JPanelRounded();
		p.setForeground(Color.GRAY);
		p.setBackground(new Color(240, 240, 240));
		p.setAlignmentY(TOP_ALIGNMENT);
		p.setBorder(BorderFactory.createEmptyBorder(9, 9, 9, 9));
		p.setLayout(new BorderLayout());

		add(p);
		

		final JPanelRounded RolesPanel = new JPanelRounded();
		RolesPanel.setForeground(Color.GRAY);
		RolesPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		final GridBagConstraints gbc_RolesPanel = new GridBagConstraints();
		gbc_RolesPanel.fill = GridBagConstraints.BOTH;
		gbc_RolesPanel.gridx = 1;
		gbc_RolesPanel.gridy = 0;
		add(RolesPanel, gbc_RolesPanel);
		final GridBagLayout gbl_RolesPanel = new GridBagLayout();
		gbl_RolesPanel.columnWidths = new int[] { 0, 0 };
		gbl_RolesPanel.rowHeights = new int[] { 0, 0, 0 };
		gbl_RolesPanel.columnWeights = new double[] { 1.0, Double.MIN_VALUE };
		gbl_RolesPanel.rowWeights = new double[] { 0.0, 1.0, Double.MIN_VALUE };
		RolesPanel.setLayout(gbl_RolesPanel);

		final JLabel lblRoles = new JLabel("Roles");
		lblRoles.setFont(new Font("Tahoma", Font.PLAIN, 17));
		final GridBagConstraints gbc_lblRoles = new GridBagConstraints();
		gbc_lblRoles.insets = new Insets(0, 0, 5, 0);
		gbc_lblRoles.gridx = 0;
		gbc_lblRoles.gridy = 0;
		RolesPanel.add(createEntityPropreties());

		final JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBorder(null);
		scrollPane.setPreferredSize(new Dimension(0, 0));
		final GridBagConstraints gbc_scrollPane = new GridBagConstraints();
		gbc_scrollPane.fill = GridBagConstraints.BOTH;
		gbc_scrollPane.gridx = 0;
		gbc_scrollPane.gridy = 1;
		RolesPanel.add(scrollPane, gbc_scrollPane);
		
	}

	public JPanel createEntityPropreties()
	{
		final JPanel panel = new JPanel();
		Dimension size = new Dimension(200, 110);
		setAllSize(panel, size);
		panel.setOpaque(false);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));

		final JPanel panelTitle = new JPanel(new FlowLayout());
		panelTitle.setOpaque(false);
		panelTitle.add(createTitleLabel("Entity"));

		size = new Dimension(200, 20);
		setAllSize(panelTitle, new Dimension((int) size.getWidth(), 40));
		setAllSize(textName, size);

		panelTitle.setAlignmentX(LEFT_ALIGNMENT);
		textName.setAlignmentX(LEFT_ALIGNMENT);

		// Event
		textName.addKeyListener(new KeyAdapter() {

			@Override
			public void keyTyped(KeyEvent e)
			{
				if (e.getKeyChar() == '\n')
				{
					final Binary entity = (Binary) currentObject;

					entity.setName(textName.getText());
					entity.notifyObservers();
				}
			}
		});


		panel.add(panelTitle);
		panel.add(textName);

		return panel;
	}	

	public JLabel createTitleLabel(String text)
	{
		final JLabel label = new JLabel(text);
		label.setFont(label.getFont().deriveFont(20.0f));
		label.setAlignmentX(CENTER_ALIGNMENT);

		return label;
	}

	public JPanel createWhitePanel()
	{
		final JPanel panel = new JPanel();
		panel.setBackground(SystemColor.control);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setOpaque(false);
		return panel;
	}

	@Override
	public void updateComponentInformations(UpdateMessage msg)
	{

		if (currentObject == null)
			return;

		if (currentObject instanceof Binary) {
		
			final Binary entity = (Binary) currentObject;
	
			if (msg != null && msg.equals(UpdateMessage.UNSELECT))
				if (!entity.getName().equals(textName.getText()))
					entity.setName(textName.getText());
					entity.notifyObservers();
	
			textName.setText(entity.getName());
			
			validate();
		} else if (currentObject instanceof dbDiagram.components.TableEntity) {
		
			final dbDiagram.components.TableEntity entity = (dbDiagram.components.TableEntity) currentObject;

	
			if (msg != null && msg.equals(UpdateMessage.UNSELECT))
				if (!entity.getName().equals(textName.getText()))
					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
	
			textName.setText(entity.getName());
	
			validate();
		}
	}
}
