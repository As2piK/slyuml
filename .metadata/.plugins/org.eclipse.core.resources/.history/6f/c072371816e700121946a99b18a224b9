package swing.propretiesView;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import swing.JPanelRounded;
import swing.SButton;
import swing.Slyum;
import utility.PersonalizedIcon;
import utility.Utility;
import abstractDiagram.IDiagramComponent.UpdateMessage;
import classDiagram.components.Attribute;
import classDiagram.components.Entity;
import classDiagram.components.InterfaceEntity;
import classDiagram.components.Method;
import classDiagram.components.PrimitiveType;
import classDiagram.components.Type;
import classDiagram.components.Variable;
import classDiagram.components.Visibility;
import classDiagram.verifyName.TypeName;
import dbDiagram.components.Field;

/**
 * Show the propreties of an UML entity with Swing components. All inner classes
 * are used for create customized JTable.
 * 
 * @author David Miserez
 * @version 1.0 - 28.07.2011
 */
public class DBEntityPropreties extends GlobalPropreties
{
	
	private static DBEntityPropreties instance = new DBEntityPropreties();

	private static final long serialVersionUID = 7817631106855232540L;

	/**
	 * Get the unique instance of this class.
	 * 
	 * @return the unique instance of EntityPropreties
	 */
	public static DBEntityPropreties getInstance()
	{
		return instance;
	}

	/**
	 * Set the given size for preferredSize, maximumSize and minimumSize to the
	 * given component.
	 * 
	 * @param component
	 *            the component to resize
	 * @param size
	 *            the size
	 */
	public static void setAllSize(JComponent component, Dimension size)
	{
		component.setPreferredSize(size);
		component.setMaximumSize(size);
		component.setMinimumSize(size);
	}

	JTable fieldsTable, methodsTable, parametersTable;
	
	private final JButton btnAddParameters,
			btnRemoveMethod,
			btnRemoveAttribute,
			btnUpAttribute,
			btnDownAttribute,
			btnUpMethod,
			btnDownMethod,
			btnRemoveParameters,
			btnRightParameters,
			btnLeftParameters,
			btnAddField,
			btnRemoveField,
			btnUpField,
			btnDownField;

	JCheckBox checkBoxAbstract = new JCheckBox("Abstract");

	JComboBox<String> comboBox = Utility.getVisibilityComboBox();

	private final JLabel imgNoAttribute, imgNoMethod, imgMethodSelected,
			imgNoParameter;

	JPanel panelParameters;

	private JScrollPane scrollPaneAttributes, scrollPaneMethods,
			scrollPaneParameters, scrollPaneFields;

	JTextField textName = new JTextField();

	protected DBEntityPropreties()
	{
		String small = ".png";
		
		if (Slyum.getSmallIcons())
			small = "_small.png";
			
		btnAddParameters = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_plus_blue" + small), Color.BLUE, "Add");
		btnRemoveMethod = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_red_delete" + small), Color.RED, "Remove");
		btnRemoveAttribute = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_red_delete" + small), Color.RED, "Remove");
		btnUpAttribute = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_up" + small), Color.MAGENTA, "Up");
		btnDownAttribute = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_down" + small), Color.MAGENTA, "Down");
		btnUpMethod = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_up" + small), Color.MAGENTA, "Up");
		btnDownMethod = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_down" + small), Color.MAGENTA, "Down");
		btnRemoveParameters = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_red_delete" + small), Color.RED, "Remove");
		btnRightParameters = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_right" + small), Color.MAGENTA, "Rigth");
		btnLeftParameters = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_left" + small), Color.MAGENTA, "Left");
		btnAddField = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_plus_blue" + small), Color.BLUE, "Add");
		btnRemoveField = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_red_delete" + small), Color.RED, "Remove");
		btnUpField = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_up" + small), Color.MAGENTA, "Up");
		btnDownField = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_violet_down" + small), Color.MAGENTA, "Down");
		
		imgNoAttribute = new JLabel(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "empty_attribute.png"));
		imgNoMethod = new JLabel(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "empty_method.png"));
		imgMethodSelected = new JLabel(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "select_method.png"));
		imgNoParameter = new JLabel(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "empty_parameter.png"));

		imgNoMethod.setAlignmentX(CENTER_ALIGNMENT);
		imgNoAttribute.setAlignmentX(CENTER_ALIGNMENT);
		imgMethodSelected.setAlignmentX(CENTER_ALIGNMENT);
		imgNoParameter.setAlignmentX(CENTER_ALIGNMENT);

		imgNoParameter.setVisible(false);

		setBackground(Color.WHITE);
		
		fieldsTable = new JTable(new FieldTableModel());
		fieldsTable.setPreferredSize(new Dimension(200, 0));
		
		fieldsTable.getModel().addTableModelListener((FieldTableModel) fieldsTable.getModel());
		
		fieldsTable.addMouseListener((FieldTableModel) fieldsTable.getModel());
		
		methodsTable = new JTable(new MethodTableModel());
		methodsTable.setPreferredScrollableViewportSize(new Dimension(200, 0));
		methodsTable.getModel().addTableModelListener((MethodTableModel) methodsTable.getModel());
		methodsTable.addMouseListener((MethodTableModel) methodsTable.getModel());

		parametersTable = new JTable(new ParametersTableModel());
		parametersTable.setPreferredScrollableViewportSize(new Dimension(70, 0));
		parametersTable.getModel().addTableModelListener((ParametersTableModel) parametersTable.getModel());
		parametersTable.addMouseListener((ParametersTableModel) parametersTable.getModel());

		JPanelRounded p = new JPanelRounded();
		p.setForeground(Color.GRAY);
		p.setBackground(new Color(240, 240, 240));
		p.setAlignmentY(TOP_ALIGNMENT);
		p.setBorder(BorderFactory.createEmptyBorder(9, 9, 9, 9));
		{
			final GridBagLayout gbl_panel = new GridBagLayout();
			gbl_panel.columnWidths = new int[] { 0, 0 };
			gbl_panel.rowHeights = new int[] { 0, 0 };
			gbl_panel.columnWeights = new double[] { 1.0, Double.MIN_VALUE };
			gbl_panel.rowWeights = new double[] { 1.0, Double.MIN_VALUE };
			p.setLayout(gbl_panel);
		}

		p.setMaximumSize(new Dimension(0, Integer.MAX_VALUE));

		{
			final GridBagConstraints gbc_btnNewButton = new GridBagConstraints();
			gbc_btnNewButton.anchor = GridBagConstraints.NORTH;
			gbc_btnNewButton.gridx = 0;
			gbc_btnNewButton.gridy = 0;
			p.add(createEntityPropreties(), gbc_btnNewButton);
		}

		add(p);

		p = new JPanelRounded();
		p.setForeground(Color.GRAY);
		p.setBackground(new Color(240, 240, 240));
		p.setAlignmentY(TOP_ALIGNMENT);
		p.setBorder(BorderFactory.createEmptyBorder(9, 9, 9, 9));
		p.setLayout(new BorderLayout());
		JPanel panel = createWhitePanel();
		panel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));
		
		//TODO Créer scrollPaneFields
		scrollPaneFields = new JScrollPane(fieldsTable);
		
		panel.add(createTitleLabel("Attributes"));
		panel.add(imgNoAttribute);

		JPanel panelButton = new JPanel();
		panelButton.setOpaque(false);
		panelButton.setLayout(new BoxLayout(panelButton, BoxLayout.PAGE_AXIS));

		{
			final JButton button = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_plus_blue" + small), Color.BLUE, "Add");
			button.setBorderPainted(false);
			button.setContentAreaFilled(false);
			button.setAlignmentX(CENTER_ALIGNMENT);
			button.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0)
				{
					((Entity) currentObject).addAttribute(new Attribute("attribute", PrimitiveType.VOID_TYPE));
					((Entity) currentObject).notifyObservers(UpdateMessage.ADD_ATTRIBUTE);
				}
			});

			panelButton.add(button);
		}

		{
			btnUpAttribute.setAlignmentX(CENTER_ALIGNMENT);
			btnUpAttribute.setEnabled(false);
			panelButton.add(btnUpAttribute);
		}
		{
			btnDownAttribute.setAlignmentX(CENTER_ALIGNMENT);
			btnDownAttribute.setEnabled(false);

			panelButton.add(btnDownAttribute);
		}

		{
			btnRemoveAttribute.setAlignmentX(CENTER_ALIGNMENT);
			btnRemoveAttribute.setEnabled(false);

			panelButton.add(btnRemoveAttribute);

		}

		p.add(panel, BorderLayout.CENTER);
		p.add(panelButton, BorderLayout.EAST);
		add(p);

		p = new JPanelRounded();
		p.setForeground(Color.GRAY);
		p.setBackground(new Color(240, 240, 240));
		p.setAlignmentY(TOP_ALIGNMENT);
		p.setBorder(BorderFactory.createEmptyBorder(9, 9, 9, 9));
		p.setLayout(new BorderLayout());
		panel = createWhitePanel();
		panel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));
		panel.add(createTitleLabel("Methods"));
		panel.add(imgNoMethod);

		panelButton = new JPanel();
		panelButton.setLayout(new BoxLayout(panelButton, BoxLayout.PAGE_AXIS));
		panelButton.setOpaque(false);
		{
			final JButton button = new SButton(PersonalizedIcon.createImageIcon(Slyum.ICON_PATH + "button_plus_blue" + small), Color.BLUE, "Add");
			button.setBorderPainted(false);
			button.setContentAreaFilled(false);
			button.setAlignmentX(CENTER_ALIGNMENT);
			button.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0)
				{
					final Entity entity = (Entity) currentObject;
					entity.addMethod(new Method("method", PrimitiveType.VOID_TYPE, Visibility.PUBLIC, entity));
					entity.notifyObservers(UpdateMessage.ADD_METHOD);
				}
			});

			panelButton.add(button);
		}

		{
			btnUpMethod.setAlignmentX(CENTER_ALIGNMENT);
			btnUpMethod.setEnabled(false);
			btnUpMethod.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0)
				{

					// Get the selected method
					final int index = methodsTable.getSelectionModel().getLeadSelectionIndex();
					final Method method = Utility.getKeysByValue(((MethodTableModel) methodsTable.getModel()).getMapIndex(), index).iterator().next();

					((Entity) currentObject).moveMethodPosition(method, -1);
					((Entity) currentObject).notifyObservers();
					method.select();
					method.notifyObservers(UpdateMessage.SELECT);
				}
			});

			panelButton.add(btnUpMethod);
		}
		{
			btnDownMethod.setAlignmentX(CENTER_ALIGNMENT);
			btnDownMethod.setEnabled(false);
			btnDownMethod.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0)
				{

					// Get the selected method
					final int index = methodsTable.getSelectionModel().getLeadSelectionIndex();
					final Method method = Utility.getKeysByValue(((MethodTableModel) methodsTable.getModel()).getMapIndex(), index).iterator().next();

					((Entity) currentObject).moveMethodPosition(method, 1);
					((Entity) currentObject).notifyObservers();
					method.select();
					method.notifyObservers(UpdateMessage.SELECT);
				}
			});

			panelButton.add(btnDownMethod);
		}

		{
			btnRemoveMethod.setAlignmentX(CENTER_ALIGNMENT);
			btnRemoveMethod.setEnabled(false);
			btnRemoveMethod.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0)
				{
					// Get the selected method
					final int index = methodsTable.getSelectionModel().getLeadSelectionIndex();
					Method method = Utility.getKeysByValue(((MethodTableModel) methodsTable.getModel()).getMapIndex(), index).iterator().next();

					((Entity) currentObject).removeMethod(method);
					((Entity) currentObject).notifyObservers();

					for (int i = 0; i <= 1; i++)
					{
						try
						{
							method = Utility.getKeysByValue(((MethodTableModel) methodsTable.getModel()).getMapIndex(), index - i).iterator().next();
						} catch (final NoSuchElementException e)
						{
							continue;
						}

						method.select();
						method.notifyObservers(UpdateMessage.SELECT);
						break;
					}
				}
			});

			panelButton.add(btnRemoveMethod);
		}

		p.add(panel, BorderLayout.CENTER);
		p.add(panelButton, BorderLayout.EAST);
		add(p);

		panel = panelParameters = new JPanelRounded();
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setForeground(Color.GRAY);
		panel.setBackground(new Color(240, 240, 240));
		panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 2, 5, 2), BorderFactory.createEtchedBorder()));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setBorder(BorderFactory.createEmptyBorder(9, 9, 9, 9));
		panel.setMaximumSize(new Dimension(100, Short.MAX_VALUE));
		panel.setPreferredSize(new Dimension(200, 0));
		panel.add(createTitleLabel("Parameters"));

		final JPanel btnPanel = new JPanel();
		btnPanel.setLayout(new BoxLayout(btnPanel, BoxLayout.LINE_AXIS));

		System.out.println("init");
		
		btnAddParameters.setAlignmentX(CENTER_ALIGNMENT);
		btnAddParameters.setBorder(null);
		btnAddParameters.setEnabled(false);
		btnAddParameters.addActionListener((ParametersTableModel) parametersTable.getModel());
		btnPanel.add(btnAddParameters);

		btnLeftParameters.setAlignmentX(CENTER_ALIGNMENT);
		btnLeftParameters.setBorder(null);
		btnLeftParameters.setEnabled(false);
		btnLeftParameters.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				// Get the selected parameter
				int index = methodsTable.getSelectionModel().getLeadSelectionIndex();
				final Method method = Utility.getKeysByValue(((MethodTableModel) methodsTable.getModel()).getMapIndex(), index).iterator().next();

				final Variable parameter = method.getParameters().get(parametersTable.getSelectionModel().getLeadSelectionIndex());

				index = parametersTable.getSelectionModel().getLeadSelectionIndex();
				method.moveParameterPosition(parameter, -1);
				method.notifyObservers();

				method.select();
				method.notifyObservers(UpdateMessage.SELECT);

				index--;
				parametersTable.addRowSelectionInterval(index, index);
				((ParametersTableModel) parametersTable.getModel()).setCurrentParameter(parameter);
			}
		});
		btnPanel.add(btnLeftParameters);

		btnRightParameters.setAlignmentX(CENTER_ALIGNMENT);
		btnRightParameters.setBorder(null);
		btnRightParameters.setEnabled(false);
		btnRightParameters.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				// Get the selected parameter
				int index = methodsTable.getSelectionModel().getLeadSelectionIndex();
				final Method method = Utility.getKeysByValue(((MethodTableModel) methodsTable.getModel()).getMapIndex(), index).iterator().next();

				index = parametersTable.getSelectionModel().getLeadSelectionIndex();
				final Variable parameter = method.getParameters().get(index);

				method.moveParameterPosition(parameter, 1);
				method.notifyObservers();

				method.select();
				method.notifyObservers(UpdateMessage.SELECT);

				index++;
				parametersTable.addRowSelectionInterval(index, index);
				((ParametersTableModel) parametersTable.getModel()).setCurrentParameter(parameter);
			}
		});
		btnPanel.add(btnRightParameters);

		btnRemoveParameters.setAlignmentX(CENTER_ALIGNMENT);
		btnRemoveParameters.setBorder(null);
		btnRemoveParameters.setEnabled(false);
		btnRemoveParameters.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				((ParametersTableModel) parametersTable.getModel()).removeCurrentParameter();
			}
		});
		btnPanel.add(btnRemoveParameters);

		panel.add(imgMethodSelected);
		panel.add(imgNoParameter);
		panel.add(btnPanel);
		add(panel);
	}

	public JPanel createEntityPropreties()
	{
		final JPanel panel = new JPanel();
		Dimension size = new Dimension(200, 110);
		setAllSize(panel, size);
		panel.setOpaque(false);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));

		final JPanel panelTitle = new JPanel(new FlowLayout());
		panelTitle.setOpaque(false);
		panelTitle.add(createTitleLabel("Entity"));

		size = new Dimension(200, 20);
		setAllSize(panelTitle, new Dimension((int) size.getWidth(), 40));
		setAllSize(textName, size);
		setAllSize(checkBoxAbstract, new Dimension((int) size.getWidth(), 30));
		setAllSize(comboBox, new Dimension(80, (int) size.getHeight()));

		panelTitle.setAlignmentX(LEFT_ALIGNMENT);
		textName.setAlignmentX(LEFT_ALIGNMENT);
		checkBoxAbstract.setAlignmentX(LEFT_ALIGNMENT);
		comboBox.setAlignmentX(LEFT_ALIGNMENT);

		checkBoxAbstract.setOpaque(false);

		// Event
		textName.addKeyListener(new KeyAdapter() {

			@Override
			public void keyTyped(KeyEvent e)
			{
				if (e.getKeyChar() == '\n')
				{
					final Entity entity = (Entity) currentObject;

					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
				}
			}
		});

		checkBoxAbstract.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				((Entity) currentObject).setAbstract(checkBoxAbstract.isSelected());
				((Entity) currentObject).notifyObservers();
			}
		});

		comboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				final Visibility newVisibility = Visibility.valueOf(comboBox.getSelectedItem().toString().toUpperCase());

				if (currentObject instanceof Entity && newVisibility != Visibility.valueOf(((Entity) currentObject).getVisibility().getName().toUpperCase()))
				{
					((Entity) currentObject).setVisibility(newVisibility);
					((Entity) currentObject).notifyObservers();
				}
			}
		});

		panel.add(panelTitle);
		panel.add(textName);
		panel.add(checkBoxAbstract);
		panel.add(comboBox);

		return panel;
	}	

	public JLabel createTitleLabel(String text)
	{
		final JLabel label = new JLabel(text);
		label.setFont(label.getFont().deriveFont(20.0f));
		label.setAlignmentX(CENTER_ALIGNMENT);

		return label;
	}

	public JPanel createWhitePanel()
	{
		final JPanel panel = new JPanel();
		panel.setBackground(SystemColor.control);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		panel.setAlignmentY(TOP_ALIGNMENT);
		panel.setOpaque(false);
		return panel;
	}

	@Override
	public void updateComponentInformations(UpdateMessage msg)
	{

		if (currentObject == null)
			return;

		if (currentObject instanceof Entity) {
		
			final Entity entity = (Entity) currentObject;
			final MethodTableModel modelMethods = (MethodTableModel) methodsTable.getModel();
	
			final LinkedList<Attribute> attributes = entity.getAttributes();
			final LinkedList<Method> methods = entity.getMethods();
	
			if (msg != null && msg.equals(UpdateMessage.UNSELECT))
				if (!entity.getName().equals(textName.getText()))
					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
	
			textName.setText(entity.getName());
			checkBoxAbstract.setSelected(entity.isAbstract());
			checkBoxAbstract.setEnabled(currentObject.getClass() != InterfaceEntity.class);
			comboBox.setSelectedItem(entity.getVisibility().getName());
	
			modelMethods.clearAll();
	
			for (int i = 0; i < methods.size(); i++)
				modelMethods.addMethod(methods.get(i));
	
			scrollPaneAttributes.setVisible(attributes.size() > 0);
			scrollPaneMethods.setVisible(methods.size() > 0);
	
			imgNoAttribute.setVisible(attributes.size() <= 0);
			imgNoMethod.setVisible(methods.size() <= 0);
	
			btnRemoveMethod.setEnabled(false);
			btnRemoveAttribute.setEnabled(false);
			btnUpAttribute.setEnabled(false);
			btnDownAttribute.setEnabled(false);
			btnUpMethod.setEnabled(false);
			btnDownMethod.setEnabled(false);
			btnRemoveParameters.setEnabled(false);
			btnRightParameters.setEnabled(false);
			btnLeftParameters.setEnabled(false);
	
			validate();
		} else if (currentObject instanceof dbDiagram.components.TableEntity) {
		
			final dbDiagram.components.TableEntity entity = (dbDiagram.components.TableEntity) currentObject;
			final FieldTableModel modelFields = (FieldTableModel) fieldsTable.getModel();
	
			final LinkedList<Field> field = entity.getFields();
	
			if (msg != null && msg.equals(UpdateMessage.UNSELECT))
				if (!entity.getName().equals(textName.getText()))
					if (!entity.setName(textName.getText()))
						textName.setText(entity.getName());
					else
						entity.notifyObservers();
	
			textName.setText(entity.getName());
			//checkBoxAbstract.setSelected(entity.isAbstract());
			//checkBoxAbstract.setEnabled(currentObject.getClass() != InterfaceEntity.class);
			//comboBox.setSelectedItem(entity.getVisibility().getName()); //TODO Selection //TODO supprimer les checkbox
	
			modelFields.clearAll();
	
			for (int i = 0; i < field.size(); i++)
				modelFields.addField(field.get(i));
	
			scrollPaneAttributes.setVisible(field.size() > 0);
	
			imgNoAttribute.setVisible(field.size() <= 0);
	
			btnRemoveField.setEnabled(false);
			btnUpField.setEnabled(false);
			btnDownField.setEnabled(false);
	
			validate();
		}
	}
}
